{"version":3,"sources":["reducers/colors.js","reducers/rootReducer.js","reducers/resistor.js","components/ColorBand.js","components/ColorCode.js","components/ValueDisplay.js","components/Resistor.js","actions/resistorActions.js","components/BandCountPicker.js","components/ColorPickerColumnRadios.js","components/ColorPicker.js","components/ColorCodeTab.js","components/AddButton.js","components/ValueInput.js","components/ValueInputList.js","components/SeriesTab.js","components/ParallelTab.js","components/NavTabs.js","App.js","reportWebVitals.js","index.js","actions/colorsActions.js"],"names":["colors","state","loading","loaded","action","type","Object","assign","newColor","payload","name","toUpperCase","rootReducer","combineReducers","resistor","colorCode","bandCount","value","digit1","digit2","digit3","multiplier","tolerance","tempCoefficient","update","digitName","ColorBand","props","bandColor","color","pos","className","ColorCode","useSelector","checkPos","index","length","map","ValueDisplay","id","displayValue","Resistor","Container","setDigit","dispatch","getState","includes","digit","updateValue","parseInt","setValueFromColorCode","BandCountPicker","useDispatch","count","handleChange","setBandCount","ToggleButtonGroup","defaultValue","variant","onChange","countChoice","idx","ToggleButton","checked","ColorPickerColumnRadios","columnName","columnDisplayName","codeIndex","currentColor","colorName","updateColorCode","newColorName","newColorCode","colorKeys","pop","splice","shift","Form","FormCheck","size","COLORS","event","target","FormCheckLabel","FormCheckInput","ColorPicker","columnNames","indexOf","ColorCodeTab","colorsLoaded","AddButton","Button","onClick","handleAddClick","ValueInput","InputGroup","FormControl","e","handleInputChange","Feedback","Text","isLast","inputCount","CloseButton","handleRemoveClick","ValueInputList","useState","inputList","setInputList","i","values","calculateTotal","inputs","push","sum","input","parseFloat","Jumbotron","SeriesTab","ParallelTab","NavTabs","key","setKey","Tabs","activeKey","onSelect","k","transition","Tab","eventKey","title","Spinner","animation","App","useAuth0","user","isAuthenticated","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","fetchColors","fetch","response","json","data","attributes","temp_coefficient","ReactDOM","render","domain","clientId","redirectUri","document","getElementById"],"mappings":"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","file":"static/js/main.730ade50.chunk.js","sourcesContent":["function colors(state = { colors: {}, loading: false, loaded: false }, action) {\n    switch (action.type) {\n        case 'FETCHING_COLORS':\n            // console.log('Fetching Colors...')\n            return Object.assign({}, { ...state }, { loading: true })\n\n        case 'COLOR_FETCHED':\n            const newColor = {}\n            newColor[action.payload.name.toUpperCase()] = action.payload\n            const colors = Object.assign({}, { ...state.colors }, newColor)\n            return Object.assign({}, { ...state }, { colors })\n\n        case 'ALL_COLORS_FETCHED':\n            // console.log('All colors added!')\n            return Object.assign(\n                {},\n                { ...state },\n                {\n                    loading: false,\n                    loaded: true,\n                }\n            )\n\n        default:\n            return state\n    }\n}\n\nexport default colors\n","import { combineReducers } from 'redux'\nimport { resistor } from '../reducers/resistor'\nimport colors from '../reducers/colors'\n\nconst rootReducer = combineReducers({ resistor, colors })\n\nexport default rootReducer\n","// this.digit1 = digit1;\n// this.digit2 = digit2;\n// this.digit3 = digit3;\n// this.multiplier = multiplier;\n// this.tolerance = tolerance;\n// this.tempCoef = tempCoef;\n\nexport const resistor = (\n    state = {\n        colorCode: ['yellow', 'violet', 'black', 'gold'],\n        bandCount: 4,\n        value: 47,\n        digit1: 4,\n        digit2: 7,\n        digit3: null,\n        multiplier: 1,\n        tolerance: 5,\n        tempCoefficient: null,\n    },\n    action\n) => {\n    // export const selectValue = (state) => state.resistor.value\n    switch (action.type) {\n        case 'SET_BAND_COUNT':\n            // const newState = Object.assign({}, { ...state })\n            // newState.bandCount = action.payload\n            // const newState = {}\n            // newState.bandCount = action.payload\n            // switch (action.payload) {\n            //     case 5:\n            //         newState.tempCoefficient = null\n            //         break\n            //     case 4:\n            //         newState.tempCoefficient = null\n            //         newState.tolerance = null\n            //         break\n            //     case 3:\n            //         newState.tempCoefficient = null\n            //         newState.tolerance = null\n            //         newState.digit3 = null\n            //         break\n            //     default:\n            //         break\n            // }\n            // console.log(`band count: ${action.payload}, new state: ${newState}`)\n            return Object.assign(\n                {},\n                { ...state },\n                { bandCount: action.payload }\n            )\n\n        case 'SET_COLOR_CODE':\n            // console.log(`color code: ${action.payload}`)\n            const colorCode = action.payload\n\n            return Object.assign({}, { ...state }, { colorCode })\n\n        case 'UPDATE_VALUE':\n            const value = action.payload\n            return Object.assign({}, { ...state }, { value })\n\n        case 'SET_VALUE':\n            // console.log(action.payload)\n            return Object.assign({}, { ...state }, action.payload)\n        default:\n            return state\n\n        case 'SET_DIGIT':\n            // console.log(action.payload)\n            const update = {}\n            update[action.payload.digitName] = action.payload.value\n            // console.log(update)\n            return Object.assign({}, { ...state }, update)\n\n        // case 'UPDATE_COLOR_CODE':\n        // console.log(action.payload)\n        //     return Object.assign({}, {...state}, {})\n    }\n}\n","import React from 'react'\n\nconst ColorBand = (props) => {\n    const bandColor = props.color\n    const pos = props.pos\n\n    if (pos === 'first') {\n        return <div className={`color-band-first ${bandColor}`}></div>\n    } else if (pos === 'last') {\n        return <div className={`color-band-last ${bandColor}`}></div>\n    } else return <div className={`color-band ${bandColor}`}></div>\n}\n\nexport default ColorBand\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport ColorBand from './ColorBand'\n\nconst ColorCode = (props) => {\n    //   const   colorCode = [\"yellow\", \"blue\", \"green\", \"gold\"]\n\n    const colorCode = useSelector((state) => state.resistor.colorCode)\n    // const colorCode = props.colorCode\n\n    const checkPos = (index) => {\n        switch (index) {\n            case 0:\n                return 'first'\n\n            case colorCode.length - 1:\n                return 'last'\n\n            default:\n                return 'mid'\n        }\n    }\n\n    return (\n        <>\n            {colorCode.map((color, index) => (\n                <ColorBand color={color} pos={checkPos(index)} key={index} />\n            ))}\n        </>\n    )\n}\n\nexport default ColorCode\n","import React, { useState, useCallback } from 'react'\nimport { useSelector } from 'react-redux'\n\nconst ValueDisplay = (props) => {\n    // const resistor = useSelector((state) => state.resistor)\n\n    // const [, updateState] = useState()\n    // const forceUpdate = useCallback(() => updateState({}), [])\n    const resistor = props.resistor\n\n    function displayValue() {\n        if (resistor.tempCoefficient != null) {\n            return `${resistor.value} \\u03A9 (Ohms)  +/- ${resistor.tolerance}%  ${resistor.tempCoefficient}ppm/K`\n        } else if (resistor.tolerance == null) {\n            return `${resistor.value} \\u03A9 (Ohms) `\n        } else {\n            return `${resistor.value} \\u03A9 (Ohms)  +/- ${resistor.tolerance}%`\n        }\n    }\n\n    return <span id=\"component-value\">{displayValue()}</span>\n}\n\nexport default ValueDisplay\n","import React from 'react'\nimport './Resistor.css'\nimport Container from 'react-bootstrap/Container'\nimport ColorCode from './ColorCode'\nimport ValueDisplay from './ValueDisplay'\nimport { useSelector } from 'react-redux'\n\nconst Resistor = (props) => {\n    // const resistor = useSelector((state) => state.resistor)\n    const resistor = props.resistor\n    return (\n        <Container>\n            <div id=\"component-container\">\n                <div id=\"left-top\">\n                    <span className=\"title-text\">Resistor</span>\n                </div>\n                <div id=\"left-bottom\"></div>\n                <div id=\"component\">\n                    <ColorCode colorCode={resistor.colorCode} />\n                </div>\n                <div id=\"right-top\">\n                    <span className=\"title-text\">Calculator</span>\n                </div>\n                <div id=\"right-bottom\"></div>\n            </div>\n            <ValueDisplay resistor={resistor} />\n        </Container>\n    )\n}\n\nexport default Resistor\n","export function setDigit(digitName, color) {\n    return (dispatch, getState) => {\n        // console.log(digitName)\n        // console.log(color)\n        const colors = getState().colors.colors\n        // console.log(color.toUpperCase())\n        // console.log(colors[color.toUpperCase()].digit)\n        let value\n        if (['digit1', 'digit2', 'digit3'].includes(digitName))\n            value = colors[color.toUpperCase()].digit\n        else value = colors[color.toUpperCase()][digitName]\n\n        dispatch({ type: 'SET_DIGIT', payload: { digitName, value } })\n        dispatch(updateValue())\n    }\n}\n\nexport function updateValue() {\n    return (dispatch, getState) => {\n        const resistor = getState().resistor\n        let value\n\n        if (resistor.tempCoefficient != null) {\n            value =\n                parseInt(\n                    `${resistor.digit1}` +\n                        `${resistor.digit2}` +\n                        `${resistor.digit3}`\n                ) * resistor.multiplier\n        } else if (resistor.tolerance === null) {\n            value =\n                parseInt(`${resistor.digit1}${resistor.digit2}`) *\n                resistor.multiplier\n        } else if (resistor.digit3 === null) {\n            value =\n                parseInt(`${resistor.digit1}${resistor.digit2}`) *\n                resistor.multiplier\n        } else {\n            value =\n                parseInt(\n                    `${resistor.digit1}` +\n                        `${resistor.digit2}` +\n                        `${resistor.digit3}`\n                ) * resistor.multiplier\n        }\n\n        // console.log(value)\n        dispatch({ type: 'UPDATE_VALUE', payload: value })\n    }\n}\n// export function updateValue() {\n//     return (dispatch, getState) => {\n//         const bandCount = getState().resistor.bandCount\n//         let digits = `${value}`.split('')\n//         const newValue = { value }\n//         console.log(newValue)\n//         newValue.digit1 = parseInt(digits.shift())\n//         newValue.digit2 = parseInt(digits.shift())\n\n//         switch (bandCount) {\n//             case 3:\n//             case 4:\n//                 newValue.multiplier = parseInt(`1` + `${digits.join('')}`)\n//                 break\n//             case 5:\n//             case 6:\n//                 newValue.digit3 = parseInt(digits.shift())\n//                 newValue.multiplier = parseInt(`1` + `${digits.join('')}`)\n//                 break\n//             default:\n//                 break\n//         }\n//         console.log(newValue)\n//         dispatch({ type: 'SET_VALUE', payload: newValue })\n//     }\n// }\n\nexport function setValueFromColorCode(colorCode) {\n    return (dispatch, getState) => {\n        const bandCount = colorCode.length\n        const colors = getState().colors.colors\n        // console.log(colors)\n        // for (const color in colorCode) {\n        const digits = {}\n        // let value\n        // }\n        // let x\n        // for (color in colorCode) {\n        dispatch({\n            type: 'SET_DIGIT',\n            payload: { digitName: 'digit3', value: null },\n        })\n        dispatch({\n            type: 'SET_DIGIT',\n            payload: { digitName: 'tolerance', value: null },\n        })\n        dispatch({\n            type: 'SET_DIGIT',\n            payload: { digitName: 'tempCoefficient', value: null },\n        })\n\n        switch (bandCount) {\n            case 3:\n                dispatch(setDigit('digit1', colorCode[0]))\n                dispatch(setDigit('digit2', colorCode[1]))\n                dispatch(setDigit('multiplier', colorCode[2]))\n                break\n            case 4:\n                dispatch(setDigit('digit1', colorCode[0]))\n                dispatch(setDigit('digit2', colorCode[1]))\n                dispatch(setDigit('multiplier', colorCode[2]))\n                dispatch(setDigit('tolerance', colorCode[3]))\n                // digits.digit1 = colors[colorCode[0].toUpperCase()].digit1\n                // digits.digit2 = colors[colorCode[1].toUpperCase()].digit2\n                // digits.multiplier =\n                //     colors[colorCode[2].toUpperCase()].multiplier\n                // digits.value =\n                //     parseInt(`${digits.digit1}` + `${digits.digit2}`) *\n                //     digits.multiplier\n                // console.log(digits.value)\n\n                break\n            case 5:\n                dispatch(setDigit('digit1', colorCode[0]))\n                dispatch(setDigit('digit2', colorCode[1]))\n                dispatch(setDigit('digit3', colorCode[2]))\n                dispatch(setDigit('multiplier', colorCode[3]))\n                dispatch(setDigit('tolerance', colorCode[4]))\n                break\n            case 6:\n                dispatch(setDigit('digit1', colorCode[0]))\n                dispatch(setDigit('digit2', colorCode[1]))\n                dispatch(setDigit('digit3', colorCode[2]))\n                dispatch(setDigit('multiplier', colorCode[3]))\n                dispatch(setDigit('tolerance', colorCode[4]))\n                dispatch(setDigit('tempCoefficient', colorCode[5]))\n                break\n            // digits.digit1 = colors[colorCode[0].toUpperCase()].digit1\n            // digits.digit2 = colors[colorCode[1].toUpperCase()].digit2\n            // digits.digit3 = colors[colorCode[2].toUpperCase()].digit3\n            // digits.multiplier =\n            //     colors[colorCode[3].toUpperCase()].multiplier\n            // digits.value =\n            //     parseInt(\n            //         `${digits.digit1}` +\n            //             `${digits.digit2}` +\n            //             `${digits.digit3}`\n            //     ) * digits.multiplier\n            // console.log(digits)\n\n            default:\n                break\n        }\n        // setColorCode(colorCode)\n        // dispatch({type: 'SET_COLOR_CODE', payload: colorCode})\n        // dispatch({ type: 'SET_VALUE', payload: digits })\n        dispatch(updateValue())\n    }\n    // }\n}\n\nexport function updateColorCode(newColorName, codeIndex) {\n    return (dispatch, getState) => {\n        const newColorCode = [...getState().resistor.colorCode]\n        newColorCode[codeIndex] = newColorName\n\n        dispatch({ type: 'SET_COLOR_CODE', payload: newColorCode })\n        setValueFromColorCode(newColorCode)\n    }\n}\n\n// export function setColorCode(colorCode) {\n//     return (dispatch) => {\n//         dispatch({ type: 'SET_BAND_COUNT', payload: colorCode.length })\n//         dispatch({ type: 'SET_COLOR_CODE', payload: colorCode })\n//         setValueFromColorCode(colorCode)\n//     }\n// }\n\nexport function setValue(value) {\n    return (dispatch, getState) => {\n        const bandCount = getState().resistor.bandCount\n        // console.log(value)\n        let digits = `${value}`.split('')\n        const newValue = { value }\n        // console.log(newValue)\n        newValue.digit1 = parseInt(digits.shift())\n        newValue.digit2 = parseInt(digits.shift())\n\n        switch (bandCount) {\n            case 3:\n            case 4:\n                newValue.multiplier = parseInt(`1${digits.join('')}`)\n                break\n            case 5:\n            case 6:\n                newValue.digit3 = parseInt(digits.shift())\n                newValue.multiplier = parseInt(`1${digits.join('')}`)\n                break\n            default:\n                break\n        }\n        // console.log(newValue)\n        dispatch({ type: 'SET_VALUE', payload: newValue })\n    }\n}\n\nexport function setBandCount(count) {\n    let colorCode\n    switch (count) {\n        case 3:\n            colorCode = ['yellow', 'violet', 'gold']\n            break\n        case 4:\n            colorCode = ['yellow', 'violet', 'black', 'gold']\n            break\n        case 5:\n            colorCode = ['yellow', 'violet', 'green', 'red', 'gold']\n            break\n        case 6:\n            colorCode = ['yellow', 'violet', 'black', 'green', 'gold', 'red']\n            break\n\n        default:\n            colorCode = ['yellow', 'violet', 'green', 'gold']\n            break\n    }\n\n    return (dispatch) => {\n        dispatch({ type: 'SET_BAND_COUNT', payload: count })\n        dispatch({ type: 'SET_COLOR_CODE', payload: colorCode })\n\n        dispatch(setValueFromColorCode(colorCode))\n        // dispatch(updateValue())\n    }\n}\n","import React from 'react'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport { setBandCount, updateValue } from '../actions/resistorActions'\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst BandCountPicker = (props) => {\n    const dispatch = useDispatch()\n    // const count = useSelector((state) => state.resistor.bandCount)\n    const count = props.bandCount\n\n    function handleChange(value) {\n        dispatch(setBandCount(value))\n        // dispatch(setValue(47000))\n        // dispatch(updateValue())\n    }\n\n    const countChoices = [3, 4, 5, 6]\n\n    return (\n        <>\n            <br></br>\n\n            <ToggleButtonGroup\n                type=\"radio\"\n                name=\"band-count\"\n                defaultValue={count}\n                variant=\"primary\"\n                onChange={(value) => handleChange(value)}\n            >\n                {countChoices.map((countChoice, idx) => (\n                    <ToggleButton\n                        key={idx}\n                        value={countChoice}\n                        checked={count === countChoice}\n                        variant=\"primary\"\n                    >\n                        {countChoice}\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n        </>\n    )\n}\n\nexport default BandCountPicker\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport Form from 'react-bootstrap/Form'\nimport FormCheck from 'react-bootstrap/FormCheck'\nimport FormCheckInput from 'react-bootstrap/FormCheckInput'\nimport FormCheckLabel from 'react-bootstrap/FormCheckLabel'\n// import { colorFromDigit, choicesFromColumnName } from '../utilities/utility'\nimport {\n    updateColorCode,\n    setValueFromColorCode,\n    setDigit,\n    updateValue,\n} from '../actions/resistorActions'\n\nconst ColorPickerColumnRadios = (props) => {\n    const columnName = props.columnName[0]\n    const columnDisplayName = props.columnName[1]\n    // const currentColor = props.columnName[2]\n    // const codeIndex = props.columnName[3]\n    const codeIndex = props.pos\n\n    // const colorCode = props.colorCode\n    const colorCode = useSelector((state) => state.resistor.colorCode)\n    // console.log(currentColor)\n    const dispatch = useDispatch()\n    // console.log(props.COLORS)\n    const currentColor = useSelector(\n        (state) => state.resistor.colorCode[codeIndex]\n    )\n    // const colorChoices = choicesFromColumnName(columnName, props.COLORS)\n\n    // const [columnValue, setColumnValue] = useState(currentColor)\n\n    const handleChange = (colorName) => {\n        // console.log(colorName)\n        // setColumnValue(colorName)\n        dispatch(updateColorCode(colorName, codeIndex))\n        dispatch(setValueFromColorCode(colorCode))\n        dispatch(setDigit(columnName, colorName))\n        // dispatch(updateValue())\n\n        // dispatch()\n    }\n\n    // const COLORS = Object.assign(\n    //     {},\n    //     (dispatch, getState) => getState().colors.colors\n    // )\n\n    const colorKeys = [\n        'BLACK',\n        'BROWN',\n        'RED',\n        'ORANGE',\n        'YELLOW',\n        'GREEN',\n        'BLUE',\n        'VIOLET',\n        'GREY',\n        'WHITE',\n        'GOLD',\n        'SILVER',\n    ]\n\n    switch (columnName) {\n        case 'digit1':\n        case 'digit2':\n        case 'digit3':\n            colorKeys.pop()\n            colorKeys.pop()\n            break\n        case 'tempCoefficient':\n            colorKeys.pop()\n            colorKeys.pop()\n            colorKeys.pop()\n            break\n        case 'tolerance':\n            colorKeys.splice(9, 1)\n            colorKeys.shift()\n            break\n        default:\n            break\n    }\n    // console.log(colorKeys)\n    // const colors = colorKeys.map((colorKey) => {\n    //     return props.COLORS[colorKey]\n    // })\n    // console.log(colors)\n\n    return (\n        <div id={`${columnName}-col`} className={'color-picker-column'}>\n            <span className={'column-title'}>{columnDisplayName}</span>\n            <Form>\n                {colorKeys.map((color, idx) => (\n                    <FormCheck\n                        size=\"lg\"\n                        type=\"radio\"\n                        className={props.COLORS[color].name}\n                        key={idx}\n                        onChange={(event) => handleChange(event.target.value)}\n                    >\n                        <FormCheckLabel>\n                            <FormCheckInput\n                                type=\"radio\"\n                                value={props.COLORS[color].name}\n                                onChange={(event) =>\n                                    handleChange(event.target.value)\n                                }\n                                checked={\n                                    currentColor === props.COLORS[color].name\n                                }\n                            />\n                            {props.COLORS[color].name}\n                        </FormCheckLabel>\n                    </FormCheck>\n                ))}\n            </Form>\n        </div>\n    )\n}\n\nexport default ColorPickerColumnRadios\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\n// import ColorChoiceColumn from './ColorChoiceColumn'\nimport './Resistor.css'\nimport ColorPickerColumnRadios from './ColorPickerColumnRadios'\n// import { updateColorCode } from '../actions/resistorActions'\n\nconst ColorPicker = (props) => {\n    const bandCount = useSelector((state) => state.resistor.bandCount)\n    const colorCode = useSelector((state) => state.resistor.colorCode)\n    // const bandCount = props.bandCount\n    // const colorCode = props.colorCode\n    const COLORS = useSelector((state) => state.colors.colors)\n\n    // const [colorCode, setColorCode] = useState(currentColorCode)\n    // let columnNames = [['digit1', 'Band 1'], ['digit2', 'Band 2'], ['digit3', 'Band 3'], ['multiplier', 'Multiplier'], ['tolerance', 'Tolerance'], ['temp-coef', 'Temperature Coefficient']]\n    let columnNames\n    switch (bandCount) {\n        case 3:\n            columnNames = [\n                ['digit1', 'Band 1', colorCode[0], 0],\n                ['digit2', 'Band 2', colorCode[1], 1],\n                ['multiplier', 'Multiplier', colorCode[2], 2],\n            ]\n            break\n        case 4:\n            columnNames = [\n                ['digit1', 'Band 1', colorCode[0], 0],\n                ['digit2', 'Band 2', colorCode[1], 1],\n                ['multiplier', 'Multiplier', colorCode[2], 2],\n                ['tolerance', 'Tolerance', colorCode[3], 3],\n            ]\n            break\n        case 5:\n            columnNames = [\n                ['digit1', 'Band 1', colorCode[0], 0],\n                ['digit2', 'Band 2', colorCode[1], 1],\n                ['digit3', 'Band 3', colorCode[2], 2],\n                ['multiplier', 'Multiplier', colorCode[3], 3],\n                ['tolerance', 'Tolerance', colorCode[4], 4],\n            ]\n            break\n        case 6:\n            columnNames = [\n                ['digit1', 'Band 1', colorCode[0], 0],\n                ['digit2', 'Band 2', colorCode[1], 1],\n                ['digit3', 'Band 3', colorCode[2], 2],\n                ['multiplier', 'Multiplier', colorCode[3], 3],\n                ['tolerance', 'Tolerance', colorCode[4], 4],\n                ['tempCoefficient', 'Temperature Coefficient', colorCode[5], 5],\n            ]\n            break\n    }\n    // console.log(columnNames)\n\n    // function newColorCode(colorName, index) {}\n\n    return (\n        <>\n            <div id={'color-picker-title'} className={'centered'}>\n                {'Choose the colors of the bands:'}\n            </div>\n            <div id=\"color-picker-container\" className={'container'}>\n                {columnNames.map((columnName, idx) => (\n                    <ColorPickerColumnRadios\n                        columnName={columnName}\n                        key={idx}\n                        COLORS={COLORS}\n                        colorCode={colorCode}\n                        pos={columnNames.indexOf(columnName)}\n                        // setColorCode={setColorCode}\n                    />\n                ))}\n            </div>\n            <footer id=\"footer\">©2021 Seth Near</footer>\n        </>\n    )\n}\n\nexport default ColorPicker\n//* <ColorChoiceColumn name=/> */\n//     <div id=\"digit1-col\" class=\"color-picker-column\"><span class='column-title'>Band 1</span></div>\n//     <div id=\"digit2-col\" class=\"color-picker-column\"><span class='column-title'>Band 2</span></div>\n//     <div id=\"digit3-col\" class=\"color-picker-column\"><span class='column-title'>Band 3</span></div>\n//     <div id=\"multiplier-col\" class=\"color-picker-column\"><span class='column-title'>Multiplier</span></div>\n//     <div id=\"tolerance-col\" class=\"color-picker-column\"><span class='column-title'>Tolerance</span></div>\n//     <div id=\"temp-coef-col\" class=\"color-picker-column\"><span class='column-title'>Temperature<br>Coefficient</span></div>\n","import Container from 'react-bootstrap/Container'\r\n// import LoginButton from './components/LoginButton'\r\n// import LogoutButton from './components/LogoutButton'\r\nimport Resistor from './Resistor'\r\nimport BandCountPicker from './BandCountPicker'\r\nimport ColorPicker from './ColorPicker'\r\n// import ValueDisplay from './components/ValueDisplay'\r\nimport { useSelector } from 'react-redux'\r\n// import { useAuth0 } from '@auth0/auth0-react'\r\n\r\nconst ColorCodeTab = () => {\r\n    const colorsLoaded = useSelector((state) => state.colors.loaded)\r\n    const resistor = useSelector((state) => state.resistor)\r\n\r\n    // const { user, isAuthenticated } = useAuth0()\r\n\r\n    if (colorsLoaded)\r\n        return (\r\n            <Container id=\"page-container\">\r\n                <Resistor resistor={resistor} />\r\n                <div id={'band-count-picker-text'} className={'centered'}>\r\n                    {'Choose the number of bands on the resistor: '}\r\n                </div>\r\n                <div id={'band-count-picker-container'}>\r\n                    <BandCountPicker bandCount={resistor.bandCount} />\r\n                </div>\r\n                <ColorPicker\r\n                    bandCount={resistor.bandCount}\r\n                    colorCode={resistor.colorCode}\r\n                />\r\n            </Container>\r\n        )\r\n    else return null\r\n}\r\n\r\nexport default ColorCodeTab\r\n","import React from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst AddButton = (props) => {\r\n    return (\r\n        <Button variant=\"success\" onClick={props.handleAddClick}>\r\n            Add\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default AddButton\r\n","import React from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport AddButton from './AddButton'\r\nimport CloseButton from 'react-bootstrap/CloseButton'\r\n\r\nconst ValueInput = (props) => {\r\n    return (\r\n        <InputGroup>\r\n            <FormControl\r\n                type=\"number\"\r\n                value={props.value}\r\n                onChange={(e) => props.handleInputChange(props.index, e)}\r\n            />\r\n            <FormControl.Feedback type=\"invalid\">\r\n                Must be a numerical value!\r\n            </FormControl.Feedback>\r\n            <InputGroup.Text>{'\\u03A9'}</InputGroup.Text>\r\n            {props.isLast ? (\r\n                <AddButton handleAddClick={props.handleAddClick} />\r\n            ) : null}\r\n            {props.inputCount > 1 ? (\r\n                <CloseButton\r\n                    onClick={() => props.handleRemoveClick(props.index)}\r\n                />\r\n            ) : null}\r\n        </InputGroup>\r\n    )\r\n}\r\n\r\nexport default ValueInput\r\n","import React, { useState } from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\nimport ValueInput from './ValueInput'\r\nimport AddButton from './AddButton'\r\nimport RemoveButton from './RemoveButton'\r\nimport CloseButton from 'react-bootstrap/CloseButton'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\n\r\nconst ValueInputList = (props) => {\r\n    const type = props.type\r\n\r\n    const [inputList, setInputList] = useState([{ value: null }])\r\n\r\n    const handleInputChange = (i, e) => {\r\n        const values = [...inputList]\r\n        values[i].value = e.target.value\r\n\r\n        setInputList(values)\r\n        calculateTotal()\r\n    }\r\n\r\n    const handleAddClick = () => {\r\n        const inputs = [...inputList]\r\n        inputs.push({ value: null })\r\n        setInputList(inputs)\r\n        calculateTotal()\r\n    }\r\n\r\n    const handleRemoveClick = (index) => {\r\n        const inputs = [...inputList]\r\n        inputs.splice(index, 1)\r\n\r\n        setInputList(inputs)\r\n        calculateTotal()\r\n    }\r\n\r\n    const calculateTotal = () => {\r\n        let sum = 0\r\n        for (const input of inputList) {\r\n            if (input.value != null) {\r\n                switch (type) {\r\n                    case 'series':\r\n                        sum = sum + parseFloat(input.value)\r\n                        break\r\n                    case 'parallel':\r\n                        sum = sum + 1 / parseFloat(input.value)\r\n                        break\r\n                    default:\r\n                        break\r\n                }\r\n            }\r\n        }\r\n        return type === 'series' ? sum : 1 / sum\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>{type === 'series' ? 'Series' : 'Parallel'} Calculator</h1>\r\n            <Jumbotron>\r\n                <h3>\r\n                    Enter the values (in Ohms) of the resistors in{' '}\r\n                    {type === 'series' ? 'Series' : 'parallel'}:\r\n                </h3>\r\n                <Container className=\"series-input-container\">\r\n                    {inputList.map((input, idx) => {\r\n                        return (\r\n                            <ValueInput\r\n                                handleInputChange={handleInputChange}\r\n                                handleAddClick={handleAddClick}\r\n                                handleRemoveClick={handleRemoveClick}\r\n                                inputCount={inputList.length}\r\n                                index={idx}\r\n                                key={`${input}-${idx}`}\r\n                                id={`${input}-${idx}`}\r\n                                value={input.value}\r\n                                isLast={\r\n                                    idx === inputList.length - 1 ? true : false\r\n                                }\r\n                            />\r\n                        )\r\n                    })}\r\n                </Container>\r\n                <div className=\"result-container\">\r\n                    <span className=\"result\">\r\n                        Total Resistance = {calculateTotal()} {'\\u03A9'}\r\n                    </span>\r\n                </div>\r\n            </Jumbotron>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ValueInputList\r\n","import React, { useState } from 'react'\r\nimport Container from 'react-bootstrap/esm/Container'\r\nimport ValueInput from './ValueInput'\r\nimport AddButton from './AddButton'\r\nimport RemoveButton from './RemoveButton'\r\nimport CloseButton from 'react-bootstrap/CloseButton'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport ValueInputList from './ValueInputList'\r\n\r\nconst SeriesTab = () => {\r\n    return <ValueInputList type=\"series\" />\r\n    // const SeriesTab = () => {\r\n    //     // const [inputCount, setInputCount] = useState(1)\r\n    //     const [inputList, setInputList] = useState([{ value: null }])\r\n\r\n    //     const handleInputChange = (i, e) => {\r\n    //         console.log(i)\r\n    //         console.log(e.target.value)\r\n    //         const values = [...inputList]\r\n    //         values[i].value = e.target.value\r\n    //         console.log(values)\r\n    //         setInputList(values)\r\n    //         calculateTotal()\r\n    //     }\r\n\r\n    //     const handleAddClick = () => {\r\n    //         const inputs = [...inputList]\r\n    //         inputs.push({ value: null })\r\n    //         setInputList(inputs)\r\n    //         calculateTotal()\r\n    //     }\r\n\r\n    //     const handleRemoveClick = (index) => {\r\n    //         const inputs = [...inputList]\r\n    //         inputs.splice(index, 1)\r\n    //         console.log(inputs)\r\n    //         setInputList(inputs)\r\n    //         calculateTotal()\r\n    //     }\r\n\r\n    //     const calculateTotal = () => {\r\n    //         let sum = 0\r\n    //         for (const input of inputList) {\r\n    //             input.value == null\r\n    //                 ? (sum = sum)\r\n    //                 : (sum = sum + parseFloat(input.value))\r\n    //         }\r\n    //         console.log(sum)\r\n    //         return sum\r\n    //         // inputList.reduce(\r\n    //         //     (sum, input) =>\r\n    //         //         input.value == null ? sum + 0 : sum + parseInt(input.value),\r\n    //         //     0\r\n    //         // )\r\n    //     }\r\n\r\n    //     return (\r\n    //         <>\r\n    //             <h1>Series Calculator</h1>\r\n    //             <h3>Enter the values (in Ohms) of the resistors in series:</h3>\r\n    //             <Container id=\"series-input-container\">\r\n    //                 {inputList.map((input, idx) => {\r\n    //                     return (\r\n    //                         <ValueInput\r\n    //                             handleInputChange={handleInputChange}\r\n    //                             handleAddClick={handleAddClick}\r\n    //                             handleRemoveClick={handleRemoveClick}\r\n    //                             inputCount={inputList.length}\r\n    //                             index={idx}\r\n    //                             key={`${input}-${idx}`}\r\n    //                             id={`${input}-${idx}`}\r\n    //                             value={input.value}\r\n    //                             isLast={idx == inputList.length - 1 ? true : false}\r\n    //                         />\r\n    //                     )\r\n    //                 })}\r\n    //             </Container>\r\n    //             <div className=\"result-container\">\r\n    //                 <span className=\"result\">\r\n    //                     Total Resistance = {calculateTotal()} {'\\u03A9'}\r\n    //                 </span>\r\n    //             </div>\r\n    //         </>\r\n    //     )\r\n    // }\r\n}\r\n// export default SeriesTab\r\nexport default SeriesTab\r\n","import React, { useState } from 'react'\r\nimport Container from 'react-bootstrap/esm/Container'\r\nimport ValueInput from './ValueInput'\r\nimport AddButton from './AddButton'\r\nimport RemoveButton from './RemoveButton'\r\nimport CloseButton from 'react-bootstrap/CloseButton'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport ValueInputList from './ValueInputList'\r\n\r\nconst ParallelTab = () => {\r\n    return <ValueInputList type=\"parallel\" />\r\n}\r\n\r\nexport default ParallelTab\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport Tab from 'react-bootstrap/Tab'\r\nimport Tabs from 'react-bootstrap/Tabs'\r\n// import Nav from 'react-bootstrap/Nav'\r\nimport ColorCodeTab from './ColorCodeTab'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport SeriesTab from './SeriesTab'\r\nimport ParallelTab from './ParallelTab'\r\nimport LoginButton from './LoginButton'\r\n\r\nconst NavTabs = () => {\r\n    const [key, setKey] = useState('colorCode')\r\n\r\n    const colorsLoaded = useSelector((state) => state.colors.loaded)\r\n\r\n    return (\r\n        <Tabs\r\n            id=\"nav-tabs\"\r\n            activeKey={key}\r\n            onSelect={(k) => setKey(k)}\r\n            transition={false}\r\n            variant=\"pills\"\r\n        >\r\n            <Tab eventKey=\"colorCode\" title=\"Color Code\">\r\n                {colorsLoaded ? (\r\n                    <ColorCodeTab />\r\n                ) : (\r\n                    <Spinner animation=\"border\" />\r\n                )}\r\n            </Tab>\r\n            <Tab eventKey=\"series\" title=\"Series\">\r\n                <SeriesTab />\r\n            </Tab>\r\n            <Tab eventKey=\"parallel\" title=\"Parallel\">\r\n                <ParallelTab />\r\n            </Tab>\r\n        </Tabs>\r\n    )\r\n}\r\n\r\nexport default NavTabs\r\n","import './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Container from 'react-bootstrap/Container'\nimport LoginButton from './components/LoginButton'\nimport LogoutButton from './components/LogoutButton'\n// import Resistor from './components/Resistor'\n// import BandCountPicker from './components/BandCountPicker'\n// import ColorPicker from './components/ColorPicker'\n// import ValueDisplay from './components/ValueDisplay'\n// import { useSelector } from 'react-redux'\nimport { useAuth0 } from '@auth0/auth0-react'\nimport NavTabs from './components/NavTabs'\n\nfunction App() {\n    // const colorsLoaded = useSelector((state) => state.colors.loaded)\n    // const resistor = useSelector((state) => state.resistor)\n\n    const { user, isAuthenticated } = useAuth0()\n\n    return (\n        <Container>\n            <NavTabs />\n        </Container>\n    )\n}\n\nexport default App\n\n// {isAuthenticated ? <LogoutButton /> : <LoginButton />}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers/rootReducer'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { Auth0Provider } from '@auth0/auth0-react'\nimport { fetchColors } from './actions/colorsActions'\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancer(applyMiddleware(thunk)))\n\nstore.dispatch(fetchColors())\n\nReactDOM.render(\n    <Auth0Provider\n        domain=\"near-net.us.auth0.com\"\n        // domain=\"auth.near-net.com\"\n        clientId=\"QoNmTgdo3zWNPxxFoeGc6p3Cu9aZhks4\"\n        // redirectUri={window.location.origin}\n        redirectUri={'http://localhost:3000'}\n    >\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </Auth0Provider>,\n\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","export function fetchColors() {\r\n    return (dispatch) => {\r\n        // console.log('dispatching')\r\n        dispatch({ type: 'FETCHING_COLORS' })\r\n        fetch('https://glacial-savannah-70189.herokuapp.com/colors')\r\n            // fetch('http://localhost:3001/colors')\r\n            .then((response) => response.json())\r\n            .then((colors) => {\r\n                // console.log(colors)\r\n                for (const color of colors.data) {\r\n                    const newColor = {\r\n                        name: color.attributes.name,\r\n                        digit: color.attributes.digit,\r\n                        multiplier: color.attributes.multiplier,\r\n                        tolerance: color.attributes.tolerance,\r\n                        tempCoefficient: color.attributes.temp_coefficient,\r\n                    }\r\n                    // console.log(newColor)\r\n                    dispatch({ type: 'COLOR_FETCHED', payload: newColor })\r\n                }\r\n                dispatch({ type: 'ALL_COLORS_FETCHED' })\r\n            })\r\n    }\r\n}\r\n"],"sourceRoot":""}