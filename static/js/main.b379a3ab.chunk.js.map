{"version":3,"sources":["reducers/colors.js","reducers/rootReducer.js","reducers/resistor.js","components/ColorBand.js","components/ColorCode.js","components/ValueDisplay.js","components/Resistor.js","actions/resistorActions.js","components/BandCountPicker.js","components/ColorPickerColumnRadios.js","components/ColorPicker.js","App.js","reportWebVitals.js","index.js","actions/colorsActions.js"],"names":["colors","state","loading","loaded","action","type","console","log","Object","assign","newColor","payload","name","toUpperCase","rootReducer","combineReducers","resistor","colorCode","bandCount","value","digit1","digit2","digit3","multiplier","tolerance","tempCoefficient","update","digitName","ColorBand","props","bandColor","color","pos","className","ColorCode","useSelector","checkPos","index","length","map","ValueDisplay","id","Resistor","Container","setDigit","dispatch","getState","digit","includes","updateValue","parseInt","setValueFromColorCode","BandCountPicker","useDispatch","count","handleChange","setBandCount","ToggleButtonGroup","defaultValue","variant","onChange","countChoice","idx","ToggleButton","checked","ColorPickerColumnRadios","columnName","columnDisplayName","codeIndex","currentColor","colorName","newColorName","newColorCode","updateColorCode","colorKeys","pop","splice","shift","Form","Check","size","COLORS","event","target","Label","Input","ColorPicker","columnNames","indexOf","App","colorsLoaded","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","fetch","response","json","data","attributes","temp_coefficient","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b379a3ab.chunk.js","sourcesContent":["function colors(state = { colors: {}, loading: false, loaded: false }, action) {\n    switch (action.type) {\n        case 'FETCHING_COLORS':\n            console.log('Fetching Colors...')\n            return Object.assign({}, { ...state }, { loading: true })\n\n        case 'COLOR_FETCHED':\n            const newColor = {}\n            newColor[action.payload.name.toUpperCase()] = action.payload\n            const colors = Object.assign({}, { ...state.colors }, newColor)\n            return Object.assign({}, { ...state }, { colors })\n\n        case 'ALL_COLORS_FETCHED':\n            console.log('All colors added!')\n            return Object.assign(\n                {},\n                { ...state },\n                {\n                    loading: false,\n                    loaded: true,\n                }\n            )\n\n        default:\n            return state\n    }\n}\n\nexport default colors\n","import { combineReducers } from 'redux'\nimport { resistor } from '../reducers/resistor'\nimport colors from '../reducers/colors'\n\nconst rootReducer = combineReducers({ resistor, colors })\n\nexport default rootReducer\n","// this.digit1 = digit1;\n// this.digit2 = digit2;\n// this.digit3 = digit3;\n// this.multiplier = multiplier;\n// this.tolerance = tolerance;\n// this.tempCoef = tempCoef;\n\nexport const resistor = (\n    state = {\n        colorCode: ['yellow', 'violet', 'black', 'gold'],\n        bandCount: 4,\n        value: 47,\n        digit1: 4,\n        digit2: 7,\n        digit3: null,\n        multiplier: 1,\n        tolerance: 5,\n        tempCoefficient: null,\n    },\n    action\n) => {\n    // export const selectValue = (state) => state.resistor.value\n    switch (action.type) {\n        case 'SET_BAND_COUNT':\n            // const newState = Object.assign({}, { ...state })\n            // newState.bandCount = action.payload\n            // const newState = {}\n            // newState.bandCount = action.payload\n            // switch (action.payload) {\n            //     case 5:\n            //         newState.tempCoefficient = null\n            //         break\n            //     case 4:\n            //         newState.tempCoefficient = null\n            //         newState.tolerance = null\n            //         break\n            //     case 3:\n            //         newState.tempCoefficient = null\n            //         newState.tolerance = null\n            //         newState.digit3 = null\n            //         break\n            //     default:\n            //         break\n            // }\n            // console.log(`band count: ${action.payload}, new state: ${newState}`)\n            return Object.assign(\n                {},\n                { ...state },\n                { bandCount: action.payload }\n            )\n\n        case 'SET_COLOR_CODE':\n            console.log(`color code: ${action.payload}`)\n            const colorCode = action.payload\n\n            return Object.assign({}, { ...state }, { colorCode })\n\n        case 'UPDATE_VALUE':\n            const value = action.payload\n            return Object.assign({}, { ...state }, { value })\n\n        case 'SET_VALUE':\n            console.log(action.payload)\n            return Object.assign({}, { ...state }, action.payload)\n        default:\n            return state\n\n        case 'SET_DIGIT':\n            console.log(action.payload)\n            const update = {}\n            update[action.payload.digitName] = action.payload.value\n            console.log(update)\n            return Object.assign({}, { ...state }, update)\n\n        // case 'UPDATE_COLOR_CODE':\n        //     console.log(action.payload)\n        //     return Object.assign({}, {...state}, {})\n    }\n}\n","import React from 'react'\n\nconst ColorBand = (props) => {\n    const bandColor = props.color\n    const pos = props.pos\n\n    if (pos === 'first') {\n        return <div className={`color-band-first ${bandColor}`}></div>\n    } else if (pos === 'last') {\n        return <div className={`color-band-last ${bandColor}`}></div>\n    } else return <div className={`color-band ${bandColor}`}></div>\n}\n\nexport default ColorBand\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport ColorBand from './ColorBand'\n\nconst ColorCode = (props) => {\n    //   const   colorCode = [\"yellow\", \"blue\", \"green\", \"gold\"]\n\n    const colorCode = useSelector((state) => state.resistor.colorCode)\n    // const colorCode = props.colorCode\n\n    const checkPos = (index) => {\n        switch (index) {\n            case 0:\n                return 'first'\n\n            case colorCode.length - 1:\n                return 'last'\n\n            default:\n                return 'mid'\n        }\n    }\n\n    return (\n        <>\n            {colorCode.map((color, index) => (\n                <ColorBand color={color} pos={checkPos(index)} key={index} />\n            ))}\n        </>\n    )\n}\n\nexport default ColorCode\n","import React, { useState, useCallback } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst ValueDisplay = (props) => {\r\n    // const resistor = useSelector((state) => state.resistor)\r\n\r\n    // const [, updateState] = useState()\r\n    // const forceUpdate = useCallback(() => updateState({}), [])\r\n    const resistor = props.resistor\r\n\r\n    function displayValue() {\r\n        if (resistor.tempCoefficient != null) {\r\n            return `${resistor.value} \\u03A9 (Ohms)  +/- ${resistor.tolerance}%  ${resistor.tempCoefficient}ppm/K`\r\n        } else if (resistor.tolerance == null) {\r\n            return `${resistor.value} \\u03A9 (Ohms) `\r\n        } else {\r\n            return `${resistor.value} \\u03A9 (Ohms)  +/- ${resistor.tolerance}%`\r\n        }\r\n    }\r\n\r\n    return <span id=\"component-value\">{displayValue()}</span>\r\n}\r\n\r\nexport default ValueDisplay\r\n","import React from 'react'\nimport './Resistor.css'\nimport Container from 'react-bootstrap/Container'\nimport ColorCode from './ColorCode'\nimport ValueDisplay from './ValueDisplay'\nimport { useSelector } from 'react-redux'\n\nconst Resistor = (props) => {\n    // const resistor = useSelector((state) => state.resistor)\n    const resistor = props.resistor\n    return (\n        <Container>\n            <div id=\"component-container\">\n                <div id=\"left-top\">\n                    <span className=\"title-text\">Resistor</span>\n                </div>\n                <div id=\"left-bottom\"></div>\n                <div id=\"component\">\n                    <ColorCode colorCode={resistor.colorCode} />\n                </div>\n                <div id=\"right-top\">\n                    <span className=\"title-text\">Calculator</span>\n                </div>\n                <div id=\"right-bottom\"></div>\n            </div>\n            <ValueDisplay resistor={resistor} />\n        </Container>\n    )\n}\n\nexport default Resistor\n","export function setDigit(digitName, color) {\n    return (dispatch, getState) => {\n        console.log(digitName)\n        console.log(color)\n        const colors = getState().colors.colors\n        console.log(color.toUpperCase())\n        console.log(colors[color.toUpperCase()].digit)\n        let value\n        if (['digit1', 'digit2', 'digit3'].includes(digitName))\n            value = colors[color.toUpperCase()].digit\n        else value = colors[color.toUpperCase()][digitName]\n\n        dispatch({ type: 'SET_DIGIT', payload: { digitName, value } })\n        dispatch(updateValue())\n    }\n}\n\nexport function updateValue() {\n    return (dispatch, getState) => {\n        const resistor = getState().resistor\n        let value\n\n        if (resistor.tempCoefficient != null) {\n            value =\n                parseInt(\n                    `${resistor.digit1}` +\n                        `${resistor.digit2}` +\n                        `${resistor.digit3}`\n                ) * resistor.multiplier\n        } else if (resistor.tolerance === null) {\n            value =\n                parseInt(`${resistor.digit1}${resistor.digit2}`) *\n                resistor.multiplier\n        } else if (resistor.digit3 === null) {\n            value =\n                parseInt(`${resistor.digit1}${resistor.digit2}`) *\n                resistor.multiplier\n        } else {\n            value =\n                parseInt(\n                    `${resistor.digit1}` +\n                        `${resistor.digit2}` +\n                        `${resistor.digit3}`\n                ) * resistor.multiplier\n        }\n\n        console.log(value)\n        dispatch({ type: 'UPDATE_VALUE', payload: value })\n    }\n}\n// export function updateValue() {\n//     return (dispatch, getState) => {\n//         const bandCount = getState().resistor.bandCount\n//         let digits = `${value}`.split('')\n//         const newValue = { value }\n//         console.log(newValue)\n//         newValue.digit1 = parseInt(digits.shift())\n//         newValue.digit2 = parseInt(digits.shift())\n\n//         switch (bandCount) {\n//             case 3:\n//             case 4:\n//                 newValue.multiplier = parseInt(`1` + `${digits.join('')}`)\n//                 break\n//             case 5:\n//             case 6:\n//                 newValue.digit3 = parseInt(digits.shift())\n//                 newValue.multiplier = parseInt(`1` + `${digits.join('')}`)\n//                 break\n//             default:\n//                 break\n//         }\n//         console.log(newValue)\n//         dispatch({ type: 'SET_VALUE', payload: newValue })\n//     }\n// }\n\nexport function setValueFromColorCode(colorCode) {\n    return (dispatch, getState) => {\n        const bandCount = colorCode.length\n        const colors = getState().colors.colors\n        console.log(colors)\n        // for (const color in colorCode) {\n        const digits = {}\n        // let value\n        // }\n        // let x\n        // for (color in colorCode) {\n        dispatch({\n            type: 'SET_DIGIT',\n            payload: { digitName: 'digit3', value: null },\n        })\n        dispatch({\n            type: 'SET_DIGIT',\n            payload: { digitName: 'tolerance', value: null },\n        })\n        dispatch({\n            type: 'SET_DIGIT',\n            payload: { digitName: 'tempCoefficient', value: null },\n        })\n\n        switch (bandCount) {\n            case 3:\n                dispatch(setDigit('digit1', colorCode[0]))\n                dispatch(setDigit('digit2', colorCode[1]))\n                dispatch(setDigit('multiplier', colorCode[2]))\n                break\n            case 4:\n                dispatch(setDigit('digit1', colorCode[0]))\n                dispatch(setDigit('digit2', colorCode[1]))\n                dispatch(setDigit('multiplier', colorCode[2]))\n                dispatch(setDigit('tolerance', colorCode[3]))\n                // digits.digit1 = colors[colorCode[0].toUpperCase()].digit1\n                // digits.digit2 = colors[colorCode[1].toUpperCase()].digit2\n                // digits.multiplier =\n                //     colors[colorCode[2].toUpperCase()].multiplier\n                // digits.value =\n                //     parseInt(`${digits.digit1}` + `${digits.digit2}`) *\n                //     digits.multiplier\n                // console.log(digits.value)\n\n                break\n            case 5:\n                dispatch(setDigit('digit1', colorCode[0]))\n                dispatch(setDigit('digit2', colorCode[1]))\n                dispatch(setDigit('digit3', colorCode[2]))\n                dispatch(setDigit('multiplier', colorCode[3]))\n                dispatch(setDigit('tolerance', colorCode[4]))\n                break\n            case 6:\n                dispatch(setDigit('digit1', colorCode[0]))\n                dispatch(setDigit('digit2', colorCode[1]))\n                dispatch(setDigit('digit3', colorCode[2]))\n                dispatch(setDigit('multiplier', colorCode[3]))\n                dispatch(setDigit('tolerance', colorCode[4]))\n                dispatch(setDigit('tempCoefficient', colorCode[5]))\n                break\n            // digits.digit1 = colors[colorCode[0].toUpperCase()].digit1\n            // digits.digit2 = colors[colorCode[1].toUpperCase()].digit2\n            // digits.digit3 = colors[colorCode[2].toUpperCase()].digit3\n            // digits.multiplier =\n            //     colors[colorCode[3].toUpperCase()].multiplier\n            // digits.value =\n            //     parseInt(\n            //         `${digits.digit1}` +\n            //             `${digits.digit2}` +\n            //             `${digits.digit3}`\n            //     ) * digits.multiplier\n            // console.log(digits)\n\n            default:\n                break\n        }\n        // setColorCode(colorCode)\n        // dispatch({type: 'SET_COLOR_CODE', payload: colorCode})\n        // dispatch({ type: 'SET_VALUE', payload: digits })\n        dispatch(updateValue())\n    }\n    // }\n}\n\nexport function updateColorCode(newColorName, codeIndex) {\n    return (dispatch, getState) => {\n        const newColorCode = [...getState().resistor.colorCode]\n        newColorCode[codeIndex] = newColorName\n\n        dispatch({ type: 'SET_COLOR_CODE', payload: newColorCode })\n        setValueFromColorCode(newColorCode)\n    }\n}\n\n// export function setColorCode(colorCode) {\n//     return (dispatch) => {\n//         dispatch({ type: 'SET_BAND_COUNT', payload: colorCode.length })\n//         dispatch({ type: 'SET_COLOR_CODE', payload: colorCode })\n//         setValueFromColorCode(colorCode)\n//     }\n// }\n\nexport function setValue(value) {\n    return (dispatch, getState) => {\n        const bandCount = getState().resistor.bandCount\n        console.log(value)\n        let digits = `${value}`.split('')\n        const newValue = { value }\n        console.log(newValue)\n        newValue.digit1 = parseInt(digits.shift())\n        newValue.digit2 = parseInt(digits.shift())\n\n        switch (bandCount) {\n            case 3:\n            case 4:\n                newValue.multiplier = parseInt(`1${digits.join('')}`)\n                break\n            case 5:\n            case 6:\n                newValue.digit3 = parseInt(digits.shift())\n                newValue.multiplier = parseInt(`1${digits.join('')}`)\n                break\n            default:\n                break\n        }\n        console.log(newValue)\n        dispatch({ type: 'SET_VALUE', payload: newValue })\n    }\n}\n\nexport function setBandCount(count) {\n    let colorCode\n    switch (count) {\n        case 3:\n            colorCode = ['yellow', 'violet', 'gold']\n            break\n        case 4:\n            colorCode = ['yellow', 'violet', 'black', 'gold']\n            break\n        case 5:\n            colorCode = ['yellow', 'violet', 'green', 'red', 'gold']\n            break\n        case 6:\n            colorCode = ['yellow', 'violet', 'black', 'green', 'gold', 'red']\n            break\n\n        default:\n            colorCode = ['yellow', 'violet', 'green', 'gold']\n            break\n    }\n\n    return (dispatch) => {\n        dispatch({ type: 'SET_BAND_COUNT', payload: count })\n        dispatch({ type: 'SET_COLOR_CODE', payload: colorCode })\n\n        dispatch(setValueFromColorCode(colorCode))\n        // dispatch(updateValue())\n    }\n}\n","import React from 'react'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport { setBandCount, updateValue } from '../actions/resistorActions'\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst BandCountPicker = (props) => {\n    const dispatch = useDispatch()\n    // const count = useSelector((state) => state.resistor.bandCount)\n    const count = props.bandCount\n\n    function handleChange(value) {\n        dispatch(setBandCount(value))\n        // dispatch(setValue(47000))\n        // dispatch(updateValue())\n    }\n\n    const countChoices = [3, 4, 5, 6]\n\n    return (\n        <>\n            <br></br>\n\n            <ToggleButtonGroup\n                type=\"radio\"\n                name=\"band-count\"\n                defaultValue={count}\n                variant=\"primary\"\n                onChange={(value) => handleChange(value)}\n            >\n                {countChoices.map((countChoice, idx) => (\n                    <ToggleButton\n                        key={idx}\n                        value={countChoice}\n                        checked={count === countChoice}\n                        variant=\"primary\"\n                    >\n                        {countChoice}\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n        </>\n    )\n}\n\nexport default BandCountPicker\n","import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\r\nimport ToggleButton from 'react-bootstrap/ToggleButton'\r\nimport Form from 'react-bootstrap/Form'\r\n// import { colorFromDigit, choicesFromColumnName } from '../utilities/utility'\r\nimport {\r\n    updateColorCode,\r\n    setValueFromColorCode,\r\n    setDigit,\r\n    updateValue,\r\n} from '../actions/resistorActions'\r\n\r\nconst ColorPickerColumnRadios = (props) => {\r\n    const columnName = props.columnName[0]\r\n    const columnDisplayName = props.columnName[1]\r\n    // const currentColor = props.columnName[2]\r\n    // const codeIndex = props.columnName[3]\r\n    const codeIndex = props.pos\r\n\r\n    // const colorCode = props.colorCode\r\n    const colorCode = useSelector((state) => state.resistor.colorCode)\r\n    // console.log(currentColor)\r\n    const dispatch = useDispatch()\r\n    // console.log(props.COLORS)\r\n    const currentColor = useSelector(\r\n        (state) => state.resistor.colorCode[codeIndex]\r\n    )\r\n    // const colorChoices = choicesFromColumnName(columnName, props.COLORS)\r\n\r\n    // const [columnValue, setColumnValue] = useState(currentColor)\r\n\r\n    const handleChange = (colorName) => {\r\n        // console.log(colorName)\r\n        // setColumnValue(colorName)\r\n        dispatch(updateColorCode(colorName, codeIndex))\r\n        dispatch(setValueFromColorCode(colorCode))\r\n        dispatch(setDigit(columnName, colorName))\r\n        dispatch(updateValue())\r\n\r\n        // dispatch()\r\n    }\r\n\r\n    // const COLORS = Object.assign(\r\n    //     {},\r\n    //     (dispatch, getState) => getState().colors.colors\r\n    // )\r\n\r\n    const colorKeys = [\r\n        'BLACK',\r\n        'BROWN',\r\n        'RED',\r\n        'ORANGE',\r\n        'YELLOW',\r\n        'GREEN',\r\n        'BLUE',\r\n        'VIOLET',\r\n        'GREY',\r\n        'WHITE',\r\n        'GOLD',\r\n        'SILVER',\r\n    ]\r\n\r\n    switch (columnName) {\r\n        case 'digit1':\r\n        case 'digit2':\r\n        case 'digit3':\r\n            colorKeys.pop()\r\n            colorKeys.pop()\r\n            break\r\n        case 'tempCoefficient':\r\n            colorKeys.pop()\r\n            colorKeys.pop()\r\n            colorKeys.pop()\r\n            break\r\n        case 'tolerance':\r\n            colorKeys.splice(9, 1)\r\n            colorKeys.shift()\r\n            break\r\n        default:\r\n            break\r\n    }\r\n    // console.log(colorKeys)\r\n    // const colors = colorKeys.map((colorKey) => {\r\n    //     return props.COLORS[colorKey]\r\n    // })\r\n    // console.log(colors)\r\n\r\n    return (\r\n        <div id={`${columnName}-col`} className={'color-picker-column'}>\r\n            <span className={'column-title'}>{columnDisplayName}</span>\r\n            <Form>\r\n                {colorKeys.map((color, idx) => (\r\n                    <Form.Check\r\n                        size=\"lg\"\r\n                        type=\"radio\"\r\n                        className={props.COLORS[color].name}\r\n                        value={props.COLORS[color].name}\r\n                        key={idx}\r\n                        onChange={(event) => handleChange(event.target.value)}\r\n                        checked={currentColor === props.COLORS[color].name}\r\n                    >\r\n                        <Form.Check.Label>\r\n                            <Form.Check.Input type=\"radio\" />\r\n\r\n                            {props.COLORS[color].name}\r\n                        </Form.Check.Label>\r\n                    </Form.Check>\r\n                ))}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ColorPickerColumnRadios\r\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\n// import ColorChoiceColumn from './ColorChoiceColumn'\nimport './Resistor.css'\nimport ColorPickerColumnRadios from './ColorPickerColumnRadios'\n// import { updateColorCode } from '../actions/resistorActions'\n\nconst ColorPicker = (props) => {\n    const bandCount = useSelector((state) => state.resistor.bandCount)\n    const colorCode = useSelector((state) => state.resistor.colorCode)\n    // const bandCount = props.bandCount\n    // const colorCode = props.colorCode\n    const COLORS = useSelector((state) => state.colors.colors)\n\n    // const [colorCode, setColorCode] = useState(currentColorCode)\n    // let columnNames = [['digit1', 'Band 1'], ['digit2', 'Band 2'], ['digit3', 'Band 3'], ['multiplier', 'Multiplier'], ['tolerance', 'Tolerance'], ['temp-coef', 'Temperature Coefficient']]\n    let columnNames\n    switch (bandCount) {\n        case 3:\n            columnNames = [\n                ['digit1', 'Band 1', colorCode[0], 0],\n                ['digit2', 'Band 2', colorCode[1], 1],\n                ['multiplier', 'Multiplier', colorCode[2], 2],\n            ]\n            break\n        case 4:\n            columnNames = [\n                ['digit1', 'Band 1', colorCode[0], 0],\n                ['digit2', 'Band 2', colorCode[1], 1],\n                ['multiplier', 'Multiplier', colorCode[2], 2],\n                ['tolerance', 'Tolerance', colorCode[3], 3],\n            ]\n            break\n        case 5:\n            columnNames = [\n                ['digit1', 'Band 1', colorCode[0], 0],\n                ['digit2', 'Band 2', colorCode[1], 1],\n                ['digit3', 'Band 3', colorCode[2], 2],\n                ['multiplier', 'Multiplier', colorCode[3], 3],\n                ['tolerance', 'Tolerance', colorCode[4], 4],\n            ]\n            break\n        case 6:\n            columnNames = [\n                ['digit1', 'Band 1', colorCode[0], 0],\n                ['digit2', 'Band 2', colorCode[1], 1],\n                ['digit3', 'Band 3', colorCode[2], 2],\n                ['multiplier', 'Multiplier', colorCode[3], 3],\n                ['tolerance', 'Tolerance', colorCode[4], 4],\n                ['tempCoefficient', 'Temperature Coefficient', colorCode[5], 5],\n            ]\n            break\n    }\n    // console.log(columnNames)\n\n    // function newColorCode(colorName, index) {}\n\n    return (\n        <>\n            <div id={'color-picker-title'} className={'centered'}>\n                {'Choose the colors of the bands:'}\n            </div>\n            <div id=\"color-picker-container\" className={'container'}>\n                {columnNames.map((columnName, idx) => (\n                    <ColorPickerColumnRadios\n                        columnName={columnName}\n                        key={idx}\n                        COLORS={COLORS}\n                        colorCode={colorCode}\n                        pos={columnNames.indexOf(columnName)}\n                        // setColorCode={setColorCode}\n                    />\n                ))}\n            </div>\n            <footer id=\"footer\">©2021 Seth Near</footer>\n        </>\n    )\n}\n\nexport default ColorPicker\n//* <ColorChoiceColumn name=/> */\n//     <div id=\"digit1-col\" class=\"color-picker-column\"><span class='column-title'>Band 1</span></div>\n//     <div id=\"digit2-col\" class=\"color-picker-column\"><span class='column-title'>Band 2</span></div>\n//     <div id=\"digit3-col\" class=\"color-picker-column\"><span class='column-title'>Band 3</span></div>\n//     <div id=\"multiplier-col\" class=\"color-picker-column\"><span class='column-title'>Multiplier</span></div>\n//     <div id=\"tolerance-col\" class=\"color-picker-column\"><span class='column-title'>Tolerance</span></div>\n//     <div id=\"temp-coef-col\" class=\"color-picker-column\"><span class='column-title'>Temperature<br>Coefficient</span></div>\n","import './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Container from 'react-bootstrap/Container'\nimport LoginButton from './components/LoginButton'\nimport LogoutButton from './components/LogoutButton'\nimport Resistor from './components/Resistor'\nimport BandCountPicker from './components/BandCountPicker'\nimport ColorPicker from './components/ColorPicker'\n// import ValueDisplay from './components/ValueDisplay'\nimport { useSelector } from 'react-redux'\n\nfunction App() {\n    const colorsLoaded = useSelector((state) => state.colors.loaded)\n    const resistor = useSelector((state) => state.resistor)\n\n    if (colorsLoaded)\n        return (\n            <Container id=\"page-container\">\n                <Resistor resistor={resistor} />\n                <div id={'band-count-picker-text'} className={'centered'}>\n                    {'Choose the number of bands on the resistor: '}\n                </div>\n                <div id={'band-count-picker-container'}>\n                    <BandCountPicker bandCount={resistor.bandCount} />\n                </div>\n                <ColorPicker\n                    bandCount={resistor.bandCount}\n                    colorCode={resistor.colorCode}\n                />\n            </Container>\n        )\n    else return null\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers/rootReducer'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n// import { Auth0Provider } from '@auth0/auth0-react'\nimport { fetchColors } from './actions/colorsActions'\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancer(applyMiddleware(thunk)))\n\nstore.dispatch(fetchColors())\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","export function fetchColors() {\n    return (dispatch) => {\n        console.log('dispatching')\n        dispatch({ type: 'FETCHING_COLORS' })\n        fetch('https://glacial-savannah-70189.herokuapp.com/colors')\n            .then((response) => response.json())\n            .then((colors) => {\n                // console.log(colors)\n                for (const color of colors.data) {\n                    const newColor = {\n                        name: color.attributes.name,\n                        digit: color.attributes.digit,\n                        multiplier: color.attributes.multiplier,\n                        tolerance: color.attributes.tolerance,\n                        tempCoefficient: color.attributes.temp_coefficient,\n                    }\n                    // console.log(newColor)\n                    dispatch({ type: 'COLOR_FETCHED', payload: newColor })\n                }\n                dispatch({ type: 'ALL_COLORS_FETCHED' })\n            })\n    }\n}\n"],"sourceRoot":""}